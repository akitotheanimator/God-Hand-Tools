using System;
using System.CodeDom;
using System.Collections;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Linq;
using System.Numerics;
using static System.Net.WebRequestMethods;
using System.Security.Cryptography.X509Certificates;
using System.Net.Configuration;
using System.Runtime.Serialization.Formatters;

public static class core
{
    public static void calculateMD(Mesh[] model, string saveFile)
    {

        for (int i = 0; i < model.Length; i++)
        {
            for (int o = 0; o < model[i].faces.Length; o++)
            {
                int[] getIndicesFromFace(int face)
                {
                    foreach (var t in model[i].faces[o].triangles) if (t.vertIndice == face) return new int[] { t.vertices[0].indice, t.vertices[1].indice, t.vertices[2].indice };
                    return new int[] { 0, 0, 0 };
                }
                model[i].faces[o].calculatePosition();



                List<Triangle> indices = new List<Triangle>();
                List<Triangle> ogIndices = new List<Triangle>();

                indices.Add(model[i].faces[o].triangles[0]);
                #region converttriangle fan to triangle strips
                for (int f = 1; f < model[i].faces[o].triangles.Length; f++)
                {
                    ogIndices.Add(model[i].faces[o].triangles[f]);
                } //set the original indices
                while (ogIndices.Count > 0) //removing from the original is the best option. one because to each iteration the size iteration will be lesser. This method makes duplicates impossible to exist, and adds all the indices on the list.
                {
                    Triangle cTriang = indices.Last();
                    int[] cIndice = new int[] { cTriang.vertices[0].indice, cTriang.vertices[1].indice, cTriang.vertices[2].indice };

                    bool found = true;

                    for (int f = 0; f < ogIndices.Count; f++)
                    {
                        Triangle oTriang = ogIndices[f];
                        int[] oIndice = new int[] { oTriang.vertices[0].indice, oTriang.vertices[1].indice, oTriang.vertices[2].indice };

                        if (cIndice[1] == oIndice[0] && cIndice[2] == oIndice[1])
                        {
                            indices.Add(ogIndices[f]);
                            ogIndices.Remove(ogIndices[f]);

                            cTriang = indices.Last();
                            cIndice = new int[] { cTriang.vertices[0].indice, cTriang.vertices[1].indice, cTriang.vertices[2].indice };

                            found = true;
                            continue;
                        }
                        else
                        {
                            found = false;
                        }

                    }
                    if (found == false)
                    {
                        indices.Add(ogIndices[0]);
                        ogIndices.Remove(ogIndices[0]);
                    }
                }
                model[i].faces[o].triangles = indices.ToArray();
                indices.Clear();
                ogIndices.Clear();
                #endregion

                model[i].faces[o].triangles[0].vertices[0].code = 32768;
                model[i].faces[o].triangles[0].vertices[1].code = 32768;
                model[i].faces[o].triangles[0].vertices[2].code = 0;
                #region this method is inneficient due to the amount of iterations crampled together, but for this ocasion it works well, since the game very weak on storage capability.
                for (int f = 1; f < model[i].faces[o].triangles.Length; f++)
                {
                    if (model[i].faces[o].triangles[f].vertices[0].indice == model[i].faces[o].triangles[f - 1].vertices[1].indice)
                    {
                        model[i].faces[o].triangles[f].vertices[0].code = -150; //imaginary code, this means the vert will be skipped. (on this code.)
                    }
                    if (model[i].faces[o].triangles[f].vertices[1].indice == model[i].faces[o].triangles[f - 1].vertices[2].indice)
                    {
                        model[i].faces[o].triangles[f].vertices[1].code = -150;
                    }
                    if (model[i].faces[o].triangles[f].vertices[0].indice != model[i].faces[o].triangles[f - 1].vertices[1].indice)
                    {
                        model[i].faces[o].triangles[f].vertices[0].code = 32768;
                    }
                    if (model[i].faces[o].triangles[f].vertices[1].indice != model[i].faces[o].triangles[f - 1].vertices[2].indice || model[i].faces[o].triangles[f].vertices[0].code == 32768)
                    {
                        model[i].faces[o].triangles[f].vertices[1].code = 32768;
                    }

                }

                int vCount = 0;
                for (int f = 1; f < model[i].faces[o].triangles.Length; f++)
                {
                    vCount++;
                    if (model[i].faces[o].triangles[f].vertices[0].code == 32768) vCount = 0;
                    if (vCount % 2 != 0 && vCount > 0)
                    {
                        Triangle switchPosition(Triangle input)
                        {
                            Triangle ret = input;
                            Vertex f0 = input.vertices[0];
                            Vertex f2 = input.vertices[2];
                            ret.vertices[2] = f0;
                            ret.vertices[0] = f2;
                            return ret;
                        }
                        model[i].faces[o].triangles[f] = switchPosition(model[i].faces[o].triangles[f]);
                        model[i].faces[o].triangles[f].vertices[0].code = 1;
                    }
                }

                #endregion
                foreach (var f in model[i].faces[o].triangles)
                {
                    Console.WriteLine("RES " + GlobalTools.returnStringFromVertices(f.vertices) + "      " + f.vertices[0].code + "," + f.vertices[1].code + "," + f.vertices[2].code + "         " + model[i].faces[o].indices.Length + "    " + model[i].name + "   " + model[i].faces[o].material);
                }
            }
        }
        saveMD(model,saveFile);
    }
    public static void saveMD(Mesh[] model,string saveTo)
    {
        using (FileStream fs = new FileStream(saveTo, FileMode.Create))
        using (BinaryWriter bw = new BinaryWriter(fs))
        {
            List<Bone> armature = model[0].armature.ToList();
            List<long> offsetMdbs = new List<long>();


            #region utility voids
            void autoIdent()
            {
                while (fs.Position % 16 != 0) bw.Write((byte)0);
            }
            void writeAtOffset(long position, dynamic what)
            {
                long bkp = fs.Position;
                fs.Position = position;
                bw.Write(what);
                fs.Position = bkp;
            }
            sbyte Map(double x, double inMin, double inMax, double outMin, double outMax)
            {
                return (sbyte)Math.Round((x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin);
            }
            #endregion
            bw.Write(7496563);
            bw.Write(3);
            bw.Write(model.Length);
            bw.Write(0);
            List<long> adressWrittingPositions = new List<long>();
            foreach (var g in model)
            {
                adressWrittingPositions.Add((long)fs.Position);
                bw.Write(0);
            }
            autoIdent();
            foreach (var meshes in model)
            {
                long offsetMdb = fs.Position;
                offsetMdbs.Add(offsetMdb);

                bw.Write(6448237);//mdb
                bw.Write(48);
                bw.Write((ushort)meshes.armature.Length);
                bw.Write((ushort)meshes.faces.Length);
                bw.Write(0);
                bw.Write(0);
                bw.Write(0);
                bw.Write(0);
                bw.Write(1f);
                long writeMeshAdressLater = fs.Position;
                for (int g = 0; g < 4; g++) bw.Write(0);
                foreach (var bone in armature)
                {
                    bw.Write(bone.pos.X);
                    bw.Write(bone.pos.Y);
                    bw.Write(bone.pos.Z);
                    bw.Write((short)-1);
                    bw.Write((short)bone.parentName);
                }
                foreach (var linkedMesh in meshes.faces)
                {
                    writeAtOffset(writeMeshAdressLater, (int)(fs.Position - offsetMdb));
                    writeMeshAdressLater += 4;


                    long offsetMesh = fs.Position;
                    bw.Write(32);
                    long offsetNormal = fs.Position;
                    bw.Write(0);
                    long offsetUV = fs.Position;
                    bw.Write(0);
                    long offsetVertColor = fs.Position;
                    bw.Write(0);
                    long offsetBoneWeight = fs.Position;
                    bw.Write(0);

                    long offsetVerticesCount = fs.Position;
                    bw.Write((ushort)0);
                    bw.Write((ushort)linkedMesh.material);
                    autoIdent();

                    ushort vCount = 0;
                    foreach (var vertices in linkedMesh.triangles)
                    {
                        //Console.WriteLine(vertices.vertices[0].indice + "  " + vertices.vertices[1].indice + "  " + vertices.vertices[2].indice);
                        for (int c = 0; c < 3; c++)
                        {
                            if (vertices.vertices[c].code != -150)
                            {
                                Console.WriteLine(vertices.vertices[c].indice + "   " + vertices.vertices[c].code);
                                bw.Write(vertices.vertices[c].pos.X);
                                bw.Write(vertices.vertices[c].pos.Y);
                                bw.Write(vertices.vertices[c].pos.Z);
                                bw.Write(vertices.vertices[c].code);
                            }
                        }
                    }
                    writeAtOffset(offsetVerticesCount, vCount);
                    writeAtOffset(offsetNormal, (uint)(fs.Position - offsetMesh));

                    foreach (var normals in linkedMesh.triangles)
                    {
                        for (int c = 0; c < 3; c++)
                        {
                            if (normals.vertices[c].code != -150)
                            {
                                bw.Write(Map(normals.vertices[c].normal.X, -1f, 1f, -128, 127));
                                bw.Write(Map(normals.vertices[c].normal.Y, -1f, 1f, -128, 127));
                                bw.Write(Map(normals.vertices[c].normal.Z, -1f, 1f, -128, 127));
                                bw.Write((byte)0);
                            }
                        }
                    }
                    autoIdent();
                    writeAtOffset(offsetUV, (uint)(fs.Position - offsetMesh));

                    foreach (var uv in linkedMesh.triangles)
                    {
                        for (int c = 0; c < 3; c++)
                        {
                            if (uv.vertices[c].code != -150)
                            {
                                bw.Write((short)Math.Round(uv.vertices[c].uv.X * 4100f));
                                bw.Write((short)Math.Round(uv.vertices[c].uv.Y * 4100f));
                            }
                        }
                    }
                    autoIdent();
                    writeAtOffset(offsetVertColor, (uint)(fs.Position - offsetMesh));

                    foreach (var color in linkedMesh.triangles)
                    {
                        for (int c = 0; c < 3; c++)
                        {
                            if (color.vertices[c].code != -150)
                            {
                                bw.Write(2155905152);
                            }
                        }
                    }
                    autoIdent();
                    writeAtOffset(offsetBoneWeight, (uint)(fs.Position - offsetMesh));

                    foreach (var bone in linkedMesh.triangles)
                    {
                        for (int c = 0; c < 3; c++)
                        {
                            if (bone.vertices[c].code != -150)
                            {
                                byte name1 = 0;
                                byte name2 = 0;
                                byte name3 = 0;
                                byte name4 = 0;
                                foreach (var boneName in armature)
                                {
                                    if (boneName.nameO == bone.vertices[c].bones[0])
                                    {
                                        name1 = (byte)boneName.name;
                                    }
                                    if (boneName.nameO == bone.vertices[c].bones[1])
                                    {
                                        name2 = (byte)boneName.name;
                                    }
                                    if (boneName.nameO == bone.vertices[c].bones[2])
                                    {
                                        name3 = (byte)boneName.name;
                                    }
                                    if (boneName.nameO == bone.vertices[c].bones[3])
                                    {
                                        name4 = (byte)boneName.name;
                                    }
                                }
                                name1 *= 4;
                                name2 *= 4;
                                name3 *= 4;
                                name4 *= 4;
                                bw.Write(name1); bw.Write(name2); bw.Write(name3); bw.Write(name4);
                                bw.Write((int)(Math.Round(bone.vertices[c].weight * 100f)));
                            }
                        }
                    }
                    autoIdent();
                }

            }
            for (int f = 0; f < 20; f++) bw.Write(0);
            for (int meshes = 0; meshes < model.Length;meshes++)
            {
                bw.Write((int)(offsetMdbs[meshes] - fs.Position));


                bw.Write(0);

                string name = model[meshes].name;
                if (name.Length > 8) name = name.Substring(0,8);
                bw.Write(Encoding.ASCII.GetBytes(name));
                autoIdent();

                bw.Write(1f); bw.Write(1f); bw.Write(1f); //scales
                bw.Write(0f); bw.Write(0f); bw.Write(0f); //rotations
                bw.Write(0f); bw.Write(0f); bw.Write(0f); //position
                autoIdent();

                bw.Write(0);
                bw.Write(600f);
                bw.Write(8323072);
                bw.Write(0);
                for (int g = 0; g < 8; g++) bw.Write(0);
            }
        }
    }
}